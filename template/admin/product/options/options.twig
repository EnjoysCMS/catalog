{% extends '@a/layout.twig' %}
{% block content %}
    {% do asset('js', [
        '//twitter.github.io/typeahead.js/js/handlebars.js',
        module.path ~ '/node_modules/typeahead.js/dist/bloodhound.min.js',
        module.path ~ '/node_modules/typeahead.js/dist/typeahead.bundle.min.js',
        module.path ~ '/node_modules/typeahead.js/dist/typeahead.jquery.min.js',
        module.path ~ '/node_modules/select2/dist/js/select2.full.min.js',
        module.path ~ '/node_modules/select2/dist/js/i18n/ru.js',
    ]) %}
    {% do asset('css', [
        module.path ~ '/node_modules/select2/dist/css/select2.min.css',
        module.path ~ '/node_modules/@ttskch/select2-bootstrap4-theme/dist/select2-bootstrap4.min.css'
    ]) %}


    <style>


        .twitter-typeahead {
            width: 100%;
            padding-right: 90px;
            margin-right: -90px;
            display: inline !important;
        }

        .typeahead,
        .tt-query,
        .tt-hint {
            width: 396px;
            height: 30px;
            padding: 8px 12px;
            font-size: 24px;
            line-height: 30px;
            border: 2px solid #ccc;
            -webkit-border-radius: 8px;
            -moz-border-radius: 8px;
            border-radius: 8px;
            outline: none;

        }

        .typeahead {
            background-color: #fff;
        }

        .typeahead:focus {
            border: 2px solid #0097cf;
        }

        .tt-query {
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
            -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        }

        .tt-hint {
            color: #999
        }

        .tt-menu {
            /*width: 422px;*/
            margin: 12px 0;
            padding: 8px 0;
            background-color: #fff;
            border: 1px solid #ccc;
            border: 1px solid rgba(0, 0, 0, 0.2);
            -webkit-border-radius: 8px;
            -moz-border-radius: 8px;
            border-radius: 8px;
            -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
            -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
            box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
        }

        .tt-suggestion {
            padding: 3px 20px;
            font-size: 14px;
            line-height: 16px;
        }

        .tt-suggestion:hover {
            cursor: pointer;
            color: #fff;
            background-color: #0097cf;
        }

        .tt-suggestion.tt-cursor {
            color: #fff;
            background-color: #0097cf;

        }

        .tt-suggestion p {
            margin: 0;
        }

        .gist {
            font-size: 14px;
        }

    </style>

    <script>
        let searchByArticul = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                url: "{{ path('@catalog_product_options_find_option_keys', {'query' : '_QUERY'}) }}",
                wildcard: '_QUERY'
            }
        });

        const findOptionKey = function () {
            $('.filter-option')
                .typeahead('destroy')
                .typeahead({
                    hint: false
                }, {

                    display: 'name',
                    source: searchByArticul,
                    templates: {
                        suggestion: Handlebars.compile('<div><strong>{{ '{{ name }}' }}</strong> {{ '{{ unit }}' }}</div>')
                    }
                })
                .bind('typeahead:select', function (ev, suggestion) {
                    let unit = $(this).parents('.form-row').find('.filter-unit');
                    unit.val(suggestion.unit);
                });
        }

        findOptionKey()
    </script>

    <script>

        const select2destroy = function (el) {
            if (el.hasClass("select2-hidden-accessible")) {
                el.select2("destroy");
            }
        }

        const select2init = function () {
            $(".filter-value").select2({
                    matcher: matchCustom,
                    allowClear: true,
                    theme: "bootstrap4",
                    ajax: {
                        url: "{{ path('@catalog_product_options_find_option_values') }}",
                        dataType: 'json',
                        delay: 250,
                        data: function (params) {
                            let option = this.parents('.form-row').find('.filter-option').val();
                            let unit = this.parents('.form-row').find('.filter-unit').val();
                            return {
                                query: params.term ?? '', // search term
                                option: option,
                                unit: unit,
                                limit: 10,
                                page: params.page
                            };
                        },
                        processResults: function (response) {


                            return {
                                "results": response.map(item => ({id: item.value, text: item.value})),
                                "pagination": {
                                    "more": response.length > 0
                                }
                            };
                        }
                    }
                });
        }

       select2init()

        function matchCustom(params, data) {
            // If there are no search terms, return all of the data
            if ($.trim(params.term) === '') {
                return data;
            }

            // Do not display the item if there is no 'text' property
            if (typeof data.text === 'undefined') {
                return null;
            }

            // `params.term` should be the term that is used for searching
            // `data.text` is the text that is displayed for the data object
            if (data.text.indexOf(params.term) > -1) {
                // var modifiedData = $.extend({}, data, true);
                // modifiedData.text += ' (matched)';

                // You can return modified objects from here
                // This includes matching the `children` how you want in nested data sets
                return $.extend({}, data, true);
            }

            // Return `null` if the term should not be displayed
            return null;
        }

        let i = 0;
        document.getElementById('add').addEventListener('click', function (e) {
            e.preventDefault();

            let template = document.getElementById('template');
            let container = document.getElementById('options-container');

            select2destroy($(".filter-value"))
            container.insertAdjacentHTML('afterend', template.innerHTML.split('~~i~~').join('new' + i++));
            findOptionKey()
            select2init()
        });


    </script>

    <script>

        $(".fillby").select2({
            width: "100%",
            dropdownParent: $("#fill-by-modal"),
            ajax: {
                url: "{{ path('@a/catalog/tools/find-products') }}",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        query: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.items,
                    };
                }

            },
            templateResult: formatRepo,
            templateSelection: function (result) {
                return result.title;
            }
        });

        function formatRepo(result) {
            if (result.loading) {
                return result.text;
            }


            let $container = $(
                "<div class='select2-result-repository clearfix'>" +

                "<div class='select2-result-repository__title'></div>" +
                "<div class='select2-result-repository__meta small'></div>" +

                "</div>"
            );

            $container.find(".select2-result-repository__title").text(result.title);
            $container.find(".select2-result-repository__meta").text(result.category);

            return $container;
        }
    </script>

    <section class="content">


        <div class="card">
            <div class="card-header">
                <h2 class="card-title">{{ title ?? product.getName }}
                    <a class="small text-dark" href="{{ path('catalog/product', {"slug": product.getSlug}) }}"><i
                            class="fas fa-external-link-alt"></i></a>
                    <small class="d-block">{{ product.category.fullTitle(' → ') }}</small>
                    <small class="d-block">{{ subtitle }}</small>
                </h2>
                <div class="float-right">
                    {% include '@catalog_admin/products_admin_links.twig' %}
                </div>
            </div>

            <!-- /.card-header -->
            <div class="card-body">
                {#                {{ form.output|raw }} #}
                <form {{ form.getAttributesString|raw }}>
                    {{ form.getElement('_token_submit').baseHtml|raw }}
                    {{ form.getElement('_token_csrf').baseHtml|raw }}

                    <div id="options-container">
                        {% for group in form.getElements %}
                            {% if group is instanceof('\\Enjoys\\Forms\\Elements\\Group') %}

                                <div class="my-2 pt-3 bg-light">
                                    {{ renderer.rendererElement(group.name)|raw }}
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                    {{ renderer.rendererElement('submit')|raw }}
                    {{ renderer.rendererElement('add')|raw }}
                    {{ renderer.rendererElement('fill_by')|raw }}
                </form>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->

    </section>

    <div id="template" class="d-none">
        <div class="form-row my-2 pt-3 bg-light">
            <div class="col-md-3">
                <input autocomplete="off" type="text" name="options[~~i~~][option]" class="filter-option form-control" placeholder="Опция">
            </div>
            <div class="col-md-1">
                <input autocomplete="off" type="text" name="options[~~i~~][unit]" class="filter-unit  form-control " placeholder="ед. изм">
            </div>
            <div class="col-md-7">
                <select name="options[~~i~~][value][]" class="filter-value form-control form-select"
                        data-placeholder="Значение" data-tags="true" multiple>
                </select>
            </div>
            <div class="col-md-1">
                <a href="#" class="remove "><i class="fa fa-trash"></i></a>
            </div>
        </div>
    </div>

    <div class="modal fade" id="fill-by-modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
         style="display: none;" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalCenterTitle">Выбор товара с похожими характеристиками</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form name="fillFromProduct" action="{{ path('@catalog_product_options_fill_from_product') }}"
                          method="POST">
                        <input type="hidden" name="id" value="{{ product.getId }}">
                        <select name="fillFromProduct" class="fillby form-control"
                                onchange="this.form.submit()"></select>
                    </form>
                </div>

            </div>
        </div>
    </div>



    {% block additional %}
    {% endblock %}

{% endblock %}
